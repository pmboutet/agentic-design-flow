#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-key';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkInsightSystem() {
  console.log('üîç V√©rification du syst√®me de d√©tection d\'insights...\n');

  try {
    // 1. V√©rifier la configuration Supabase
    console.log('1Ô∏è‚É£ Configuration Supabase:');
    if (!supabaseUrl || supabaseUrl === 'https://your-project.supabase.co') {
      console.log('‚ùå NEXT_PUBLIC_SUPABASE_URL non configur√©');
      return;
    }
    if (!supabaseServiceKey || supabaseServiceKey === 'your-service-key') {
      console.log('‚ùå SUPABASE_SERVICE_ROLE_KEY non configur√©');
      return;
    }
    console.log('‚úÖ Configuration Supabase OK');

    // 2. V√©rifier la connexion √† la base de donn√©es
    console.log('\n2Ô∏è‚É£ Connexion √† la base de donn√©es:');
    const { data: testData, error: testError } = await supabase
      .from('ai_agents')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.log('‚ùå Erreur de connexion:', testError.message);
      return;
    }
    console.log('‚úÖ Connexion √† la base de donn√©es OK');

    // 3. V√©rifier l'agent de d√©tection d'insights
    console.log('\n3Ô∏è‚É£ Agent de d√©tection d\'insights:');
    const { data: insightAgent, error: agentError } = await supabase
      .from('ai_agents')
      .select('*')
      .eq('slug', 'ask-insight-detection')
      .maybeSingle();

    if (agentError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration de l\'agent:', agentError.message);
      return;
    }

    if (!insightAgent) {
      console.log('‚ùå Agent de d√©tection d\'insights non trouv√©');
      console.log('üí° Solution: Ex√©cutez le script d\'initialisation des donn√©es AI');
      return;
    }

    console.log('‚úÖ Agent trouv√©:', insightAgent.name);
    console.log(`   - ID: ${insightAgent.id}`);
    console.log(`   - Model Config ID: ${insightAgent.model_config_id}`);
    console.log(`   - System Prompt: ${insightAgent.system_prompt?.length || 0} caract√®res`);

    // 4. V√©rifier la configuration du mod√®le
    console.log('\n4Ô∏è‚É£ Configuration du mod√®le:');
    const { data: modelConfig, error: modelError } = await supabase
      .from('ai_model_configs')
      .select('*')
      .eq('id', insightAgent.model_config_id)
      .maybeSingle();

    if (modelError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration du mod√®le:', modelError.message);
      return;
    }

    if (!modelConfig) {
      console.log('‚ùå Configuration du mod√®le non trouv√©e');
      return;
    }

    console.log('‚úÖ Configuration du mod√®le trouv√©e:');
    console.log(`   - Provider: ${modelConfig.provider}`);
    console.log(`   - Model: ${modelConfig.model}`);
    console.log(`   - API Key Env Var: ${modelConfig.api_key_env_var}`);

    // 5. V√©rifier les variables d'environnement API
    console.log('\n5Ô∏è‚É£ Variables d\'environnement API:');
    const apiKeyEnvVar = modelConfig.api_key_env_var;
    const apiKey = process.env[apiKeyEnvVar];
    
    if (!apiKey) {
      console.log(`‚ùå Variable d'environnement ${apiKeyEnvVar} non d√©finie`);
      console.log('üí° Solution: Ajoutez votre cl√© API dans le fichier .env.local');
      return;
    }
    console.log(`‚úÖ Variable d'environnement ${apiKeyEnvVar} d√©finie`);

    // 6. V√©rifier les tables n√©cessaires
    console.log('\n6Ô∏è‚É£ Tables de la base de donn√©es:');
    const tables = [
      'insights',
      'insight_authors', 
      'insight_types',
      'ai_insight_jobs',
      'kpi_estimations'
    ];

    for (const table of tables) {
      const { error: tableError } = await supabase
        .from(table)
        .select('count')
        .limit(1);
      
      if (tableError) {
        console.log(`‚ùå Table ${table} non accessible:`, tableError.message);
        return;
      }
      console.log(`‚úÖ Table ${table} accessible`);
    }

    // 7. V√©rifier les types d'insights
    console.log('\n7Ô∏è‚É£ Types d\'insights:');
    const { data: insightTypes, error: typesError } = await supabase
      .from('insight_types')
      .select('*');

    if (typesError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des types:', typesError.message);
      return;
    }

    if (!insightTypes || insightTypes.length === 0) {
      console.log('‚ö†Ô∏è  Aucun type d\'insight configur√©');
      console.log('üí° Solution: Ex√©cutez les migrations de base de donn√©es');
    } else {
      console.log(`‚úÖ ${insightTypes.length} types d'insights configur√©s`);
      insightTypes.forEach(type => {
        console.log(`   - ${type.name} (${type.id})`);
      });
    }

    // 8. Test de simulation
    console.log('\n8Ô∏è‚É£ Test de simulation:');
    console.log('‚úÖ Tous les composants sont en place');
    console.log('‚úÖ Le syst√®me de d√©tection d\'insights devrait fonctionner');
    console.log('\nüìã R√©sum√©:');
    console.log('   - Configuration Supabase: OK');
    console.log('   - Agent de d√©tection: OK');
    console.log('   - Configuration du mod√®le: OK');
    console.log('   - Variables d\'environnement: OK');
    console.log('   - Tables de base de donn√©es: OK');
    console.log('   - Types d\'insights: OK');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  }
}

checkInsightSystem();
